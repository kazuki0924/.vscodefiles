{
  // Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
  "go.addTags": {
    "tags": "json",
    "options": "json=omitempty",
    "promptForTags": false,
    "transform": "snakecase",
    "template": ""
  },
  // Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
  "go.alternateTools": {},
  // Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
  "go.autocompleteUnimportedPackages": false,
  // Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
  "go.buildFlags": [],
  // Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
  "go.buildOnSave": "package",
  // The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
  "go.buildTags": "",
  // This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
  "go.coverageDecorator": {
    "type": "highlight",
    "coveredHighlightColor": "rgba(64,128,128,0.5)",
    "uncoveredHighlightColor": "rgba(128,64,64,0.25)",
    "coveredBorderColor": "rgba(64,128,128,0.5)",
    "uncoveredBorderColor": "rgba(128,64,64,0.25)",
    "coveredGutterStyle": "blockblue",
    "uncoveredGutterStyle": "slashyellow"
  },
  // Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
  "go.coverageOptions": "showBothCoveredAndUncoveredCode",
  // When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
  "go.coverMode": "default",
  // If true, runs 'go test -coverprofile' on save and shows test coverage.
  "go.coverOnSave": true,
  // If true, shows test coverage when Go: Test Function at cursor command is run.
  "go.coverOnSingleTest": true,
  // If true, shows test coverage when Go: Test Single File command is run.
  "go.coverOnSingleTestFile": true,
  // If true, shows test coverage when Go: Test Package command is run.
  "go.coverOnTestPackage": true,
  // When generating code coverage, should counts be shown as --374--
  "go.coverShowCounts": false,
  // Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
  "go.delveConfig": {
    "dlvLoadConfig": {
      "followPointers": true,
      "maxVariableRecurse": 1,
      "maxStringLen": 64,
      "maxArrayValues": 64,
      "maxStructFields": -1
    },
    "apiVersion": 2,
    "showGlobalVariables": false,
    "debugAdapter": "legacy",
    "substitutePath": []
  },
  // If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
  "go.disableConcurrentTests": false,
  // Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
  "go.docsTool": "godoc",
  // Experimental Feature: Enable/Disable entries from the context menu in the editor.
  "go.editorContextMenuCommands": {
    "toggleTestFile": true,
    "addTags": true,
    "removeTags": true,
    "fillStruct": true,
    "testAtCursor": true,
    "testFile": true,
    "testPackage": false,
    "generateTestForFunction": true,
    "generateTestForFile": false,
    "generateTestForPackage": false,
    "addImport": true,
    "testCoverage": true,
    "playground": true,
    "debugTestAtCursor": true,
    "benchmarkAtCursor": false
  },
  // Feature level setting to enable/disable code lens for references and run/debug tests
  "go.enableCodeLens": {
    "references": true,
    "runtest": true
  },
  // Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
  "go.formatFlags": [],
  // Not applicable when using the language server. Choosing 'goimports', 'goreturns', or 'gofumports' will add missing imports and remove unused imports.
  //  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
  //  - gofmt: Formats the file according to the standard Go style.
  //  - goimports: Organizes imports and formats the file with gofmt.
  //  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
  //  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt.
  //  - gofumports: Applies gofumpt formatting and organizes imports.
  "go.formatTool": "default",
  // Additional command line flags to pass to `gotests` for generating tests.
  "go.generateTestsFlags": [],
  // Enable gocode's autobuild feature. Not applicable when using the language server.
  "go.gocodeAutoBuild": false,
  // Additional flags to pass to gocode. Not applicable when using the language server.
  "go.gocodeFlags": [
    "-builtin",
    "-ignore-case",
    "-unimported-packages"
  ],
  // Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
  "go.gocodePackageLookupMode": "go",
  // Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
  "go.gopath": null,
  // Specifies the GOROOT to use when no environment variable is set. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
  "go.goroot": null,
  // Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
  "go.gotoSymbol.ignoreFolders": [],
  // If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
  "go.gotoSymbol.includeGoroot": false,
  // If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
  "go.gotoSymbol.includeImports": false,
  // Infer GOPATH from the workspace root. This is ignored when using Go Modules. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
  "go.inferGopath": false,
  // If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
  "go.installDependenciesWhenBuilding": false,
  // Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
  "go.languageServerExperimentalFeatures": {
    "diagnostics": true
  },
  // Flags like -rpc.trace and -logfile to be used while running the language server.
  "go.languageServerFlags": [],
  // Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
  "go.lintFlags": [],
  // Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
  "go.lintOnSave": "package",
  // Specifies Lint tool name.
  "go.lintTool": "staticcheck",
  // Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
  "go.liveErrors": {
    "enabled": false,
    "delay": 500
  },
  // The logging level the extension logs at, defaults to 'error'
  "go.logging.level": "error",
  // The flags configured here will be passed through to command `goplay`
  "go.playground": {
    "openbrowser": true,
    "share": true,
    "run": true
  },
  // Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
  "go.removeTags": {
    "tags": "",
    "options": "",
    "promptForTags": false
  },
  // Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
  "go.testEnvFile": null,
  // Environment variables that will be passed to the process that runs the Go tests
  "go.testEnvVars": {},
  // Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
  "go.testFlags": null,
  // Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
  "go.testOnSave": false,
  // The Go build tags to use for when running tests. If null, then buildTags will be used.
  "go.testTags": null,
  // Specifies the timeout for go test in ParseDuration format.
  "go.testTimeout": "30s",
  // Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS)
  "go.toolsEnvVars": {},
  // Location to install the Go tools that the extension depends on if you don't want them in your GOPATH. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
  "go.toolsGopath": null,
  // Automatically update the tools used by the extension, without prompting the user.
  "go.toolsManagement.autoUpdate": false,
  // Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
  //  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
  //  - local: checks only the minimum tools versions required by the extension
  //  - off: completely disables version check (not recommended)
  "go.toolsManagement.checkForUpdates": "proxy",
  // Trace the communication between VS Code and the Go language server.
  "go.trace.server": "off",
  // Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
  "go.useCodeSnippetsOnFunctionSuggest": false,
  // Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
  "go.useCodeSnippetsOnFunctionSuggestWithoutType": false,
  // Use `go.toolsManagement.checkForUpdates` instead.
  // When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
  "go.useGoProxyToCheckForToolUpdates": true,
  // Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
  "go.useLanguageServer": true,
  // Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
  "go.vetFlags": [],
  // Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
  "go.vetOnSave": "package",
  // Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
  "gopls": {}
}
